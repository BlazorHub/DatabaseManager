@inject SingletonServices singleton
@inject IDataSources dataSources

    <EditForm Model="TransferParameters" OnValidSubmit="OnValidSubmit">
        <div>
            <h3>Target Database</h3>
        </div>
        <p>Target Database: @singleton.TargetConnector</p>

        <div>
            <h3>Source Database</h3>
        </div>

        @if (options == null)
        {
            <text>Loading...</text>
        }
        else
        {
            <div class="form-group">
                <label for="targetlist">Database Target:</label>
                <select class="form-control" id="targetlist" @onchange="Selected">
                    <option selected hidden>Choose Connector</option>
                    @foreach (var option in options)
                    {
                        <option>@option</option>
                    }
                </select>
            </div>
        }

        <button class="btn btn-success" type="submit">Start Transfer</button>
    </EditForm>

@code {
    [Parameter] public TransferParameters TransferParameters { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private List<string> options { get; set; } = new List<string>();
    List<ConnectParameters> ConnectParameters;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ConnectParameters = await dataSources.GetSources();
            Console.WriteLine(ConnectParameters.Count());
            foreach (ConnectParameters conn in ConnectParameters)
            {
                options.Add(conn.SourceName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private void Selected(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        TransferParameters.SourceName = selectedString;
    }
}
