@page "/"
@inject IDataSources dataSources
@inject IIndexData indexData
@inject SingletonServices singleton

<div class="jumbotron">
    <h1>Welcome to Database Manager tool</h1>
    <p class="lead">The tool to transfer data from your data ware house to the PetrodataOnline project store</p>
</div>

@if (options == null)
{
    <text>Loading...</text>
}
else
{
    <div class="form-group">
        <label for="targetlist">Database Target:</label>
        <select class="form-control" id="targetlist" @onchange="Selected">
            <option selected hidden>Choose Connector</option>
            @foreach (var option in options)
            {
                <option>@option</option>
            }
        </select>
    </div>

    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowPaging="true" PageSize="5" AllowSorting="true"
                Data="@index" TItem="DmsIndex">
        <Columns>
            <RadzenGridColumn TItem="DmsIndex" Property="DataType" Title="Data Type" Width="200px"/>
            <RadzenGridColumn TItem="DmsIndex" Property="NumberOfDataObjects" Title="Number of data objects" 
                              TextAlign="TextAlign.Center" Width="70px"/>
        </Columns>
    </RadzenGrid>
}

@code {
    private List<string> options { get; set; } = new List<string>();
    List<ConnectParameters> ConnectParameters;
    IEnumerable<DmsIndex> index;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ConnectParameters = await dataSources.GetSources();
            Console.WriteLine(ConnectParameters.Count());
            foreach (ConnectParameters conn in ConnectParameters)
            {
                options.Add(conn.SourceName);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Errors: {ex}");
        }
    }

    private async Task Selected(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        singleton.TargetConnector = selectedString;
        await GetIndexData();
    }

    private async Task GetIndexData()
    {
        index = await indexData.GetIndex(singleton.TargetConnector);
        //Console.WriteLine(index.Count);
    }
}