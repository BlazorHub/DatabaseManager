@page "/ppdmtoppdm"
@using System.Text
@*@using System.Text.Json*@
@inject HttpClient Http

<h1>PPDM to PPDM Data Transfer</h1>

<TransferParametersForm TransferParameters="transferParameters" OnValidSubmit="StartDatabaseTransfer" />

<div>
    <p>Current status: @statusMessage</p>
</div>


@code {
    private string statusMessage = "Not started";
    private string jsonString = "";
    private StringContent content;
    private HttpClient client = new HttpClient();
    private TransferParameters transferParameters { get; set; } = new TransferParameters();

    protected async Task StartDatabaseTransfer()
    {
        Console.WriteLine($"Database is {transferParameters.TargetDatabase}");
        client.Timeout = TimeSpan.FromMinutes(10);
        foreach (string tableName in DatabaseTables.Names)
        {
            transferParameters.Table = tableName;
            jsonString = JsonSerializer.Serialize(transferParameters);
            content = new StringContent(jsonString, Encoding.UTF8, "application/json");
            statusMessage = $"Deleting from {tableName}";
            StateHasChanged();
            HttpResponseMessage response = await client.PostAsync("https://localhost:44386/api/Delete", content);
            if (response.IsSuccessStatusCode)
            {
                using (HttpContent respContent = response.Content)
                {
                    string tr = respContent.ReadAsStringAsync().Result;
                    statusMessage = $"Deleting from {tableName} completed";
                    StateHasChanged();
                }
            }
            else
            {
                statusMessage = $"Deleting from {tableName} was not successful";
                return;
            }
        }

        foreach (string tableName in CopyTables.Names)
        {
            transferParameters.Table = tableName;
            jsonString = JsonSerializer.Serialize(transferParameters);
            content = new StringContent(jsonString, Encoding.UTF8, "application/json");
            statusMessage = $"Copying table {tableName}";
            StateHasChanged();
            HttpResponseMessage response = await client.PostAsync("https://localhost:44386/api/Copy", content);
            if (response.IsSuccessStatusCode)
            {
                using (HttpContent respContent = response.Content)
                {
                    string tr = respContent.ReadAsStringAsync().Result;
                    statusMessage = $"Copying {tableName} completed";
                    StateHasChanged();
                }
            }
            else
            {
                statusMessage = $"Copying {tableName} was not successful";
                return;
            }
        }

        statusMessage = $"Transfer Complete";
        StateHasChanged();
    }
}
